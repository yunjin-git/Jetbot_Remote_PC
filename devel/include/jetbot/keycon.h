// Generated by gencpp from file jetbot/keycon.msg
// DO NOT EDIT!


#ifndef JETBOT_MESSAGE_KEYCON_H
#define JETBOT_MESSAGE_KEYCON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetbot
{
template <class ContainerAllocator>
struct keycon_
{
  typedef keycon_<ContainerAllocator> Type;

  keycon_()
    : ServoX(0)
    , ServoY(0)
    , Front(0)
    , Right(0)
    , Left(0)  {
    }
  keycon_(const ContainerAllocator& _alloc)
    : ServoX(0)
    , ServoY(0)
    , Front(0)
    , Right(0)
    , Left(0)  {
  (void)_alloc;
    }



   typedef int32_t _ServoX_type;
  _ServoX_type ServoX;

   typedef int32_t _ServoY_type;
  _ServoY_type ServoY;

   typedef int32_t _Front_type;
  _Front_type Front;

   typedef int32_t _Right_type;
  _Right_type Right;

   typedef int32_t _Left_type;
  _Left_type Left;





  typedef boost::shared_ptr< ::jetbot::keycon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetbot::keycon_<ContainerAllocator> const> ConstPtr;

}; // struct keycon_

typedef ::jetbot::keycon_<std::allocator<void> > keycon;

typedef boost::shared_ptr< ::jetbot::keycon > keyconPtr;
typedef boost::shared_ptr< ::jetbot::keycon const> keyconConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetbot::keycon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetbot::keycon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetbot::keycon_<ContainerAllocator1> & lhs, const ::jetbot::keycon_<ContainerAllocator2> & rhs)
{
  return lhs.ServoX == rhs.ServoX &&
    lhs.ServoY == rhs.ServoY &&
    lhs.Front == rhs.Front &&
    lhs.Right == rhs.Right &&
    lhs.Left == rhs.Left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetbot::keycon_<ContainerAllocator1> & lhs, const ::jetbot::keycon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::keycon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetbot::keycon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::keycon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetbot::keycon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::keycon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetbot::keycon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetbot::keycon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21f0631ed4780625ab71b7a02b0921b4";
  }

  static const char* value(const ::jetbot::keycon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21f0631ed4780625ULL;
  static const uint64_t static_value2 = 0xab71b7a02b0921b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetbot::keycon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetbot/keycon";
  }

  static const char* value(const ::jetbot::keycon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetbot::keycon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ServoX\n"
"int32 ServoY\n"
"int32 Front\n"
"int32 Right\n"
"int32 Left\n"
;
  }

  static const char* value(const ::jetbot::keycon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetbot::keycon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ServoX);
      stream.next(m.ServoY);
      stream.next(m.Front);
      stream.next(m.Right);
      stream.next(m.Left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct keycon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetbot::keycon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetbot::keycon_<ContainerAllocator>& v)
  {
    s << indent << "ServoX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ServoX);
    s << indent << "ServoY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ServoY);
    s << indent << "Front: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Front);
    s << indent << "Right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Right);
    s << indent << "Left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETBOT_MESSAGE_KEYCON_H
